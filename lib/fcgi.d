module lib.fcgi;import tango.io.device.Conduit;import tango.core.Exception;extern(C){	struct FCGX_Stream {		ubyte* rdNext;		ubyte* wrNext;		ubyte* stop;		ubyte* stopUnget;		int isReader;		int isClosed;		int wasFCloseCalled;		int FCGI_errno;		void* function(FCGX_Stream* stream) fillBuffProc;		void* function(FCGX_Stream* stream, int doClose) emptyBuffProc;		void* data;	}	alias char** FCGX_ParamArray;	int FCGX_Accept(FCGX_Stream** stdin, FCGX_Stream** stdout, FCGX_Stream** stderr, FCGX_ParamArray* envp);	int FCGX_GetStr(char* str, int n, FCGX_Stream* stream);	int FCGX_PutStr(char* str, int n, FCGX_Stream* stream);	int FCGX_HasSeenEOF(FCGX_Stream* stream);}/*class FCGI_InputStream : InputStream{	FCGX_Stream* _inStream;		this(FCGX_Stream* inStream)	{		this._inStream = inStream;	}		size_t read(void[] dst)	{		return FCGX_GetStr(cast(char*)dst.ptr, dst.length, _inStream);	}		void[] load(size_t max = -1)	{		return Conduit.load(this, max);	}		InputStream input()	{		return this;	}		void close()	{		//do nothing here	}		long seek(long offset, Anchor anchor)	{		throw new IOException("operation not supported");	}		IConduit conduit()	{		return null;	}}class FCGI_OutputStream : OutputStream{	FCGX_Stream* _outStream;		this(FCGX_Stream* outStream)	{		this._outStream = outStream;	}		size_t write(void[] src)	{		return FCGX_PutStr(cast(char*)src.ptr, src.length, _outStream);	}		OutputStream copy(InputStream src, size_t max = -1)	{		Conduit.transfer(src, this, max);		return this;	}}*/class FCGI_Conduit : Conduit{	FCGX_Stream* _inStream, _outStream;	this(FCGX_Stream* inStream, FCGX_Stream* outStream)	{		this._inStream = inStream;		this._outStream = outStream;	}		size_t write(void[] src)	{		return FCGX_PutStr(cast(char*)src.ptr, src.length, _outStream);	}		size_t read(void[] dst)	{		return FCGX_GetStr(cast(char*)dst.ptr, dst.length, _inStream);	}	size_t bufferSize()	{		return 1024;	}	char[] toString()	{		return "FastCGIConduit";	}	void detach()	{		//do nothing here, stream is closed automatically	}}